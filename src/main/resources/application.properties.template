# =============================================================================
# PLANTILLA DE CONFIGURACIÓN - FERRETERÍA BACKEND
# =============================================================================
# 
# INSTRUCCIONES:
# 1. Copia este archivo y renómbralo a "application.properties"
# 2. Reemplaza los valores entre < > con tus datos reales
# 3. NO subas el archivo application.properties al repositorio (está en .gitignore)
#
# =============================================================================

# Puerto donde correrá el servidor (por defecto 8080)
server.port=8080

# =============================================================================
# CONFIGURACIÓN DE BASE DE DATOS - MYSQL
# =============================================================================

# Tipo de base de datos
spring.jpa.database=MYSQL

# Mostrar las consultas SQL en la consola (útil para debugging)
spring.jpa.show-sql=true

# Estrategia de creación/actualización de tablas
# - create: Borra y crea las tablas cada vez (CUIDADO: pierdes datos)
# - create-drop: Igual que create pero borra al cerrar la app
# - update: Actualiza la estructura sin borrar datos (RECOMENDADO para desarrollo)
# - validate: Solo valida que la estructura coincida
# - none: No hace nada automáticamente
spring.jpa.hibernate.ddl-auto=update

# Driver de conexión a MySQL
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# URL de conexión a la base de datos
# Formato: jdbc:mysql://HOST:PUERTO/NOMBRE_BASE_DATOS
# Reemplaza <TU_HOST>, <TU_PUERTO> y <NOMBRE_BASE_DATOS>
spring.datasource.url=jdbc:mysql://<TU_HOST>:<TU_PUERTO>/<NOMBRE_BASE_DATOS>

# Credenciales de la base de datos
# Reemplaza <TU_USUARIO> y <TU_PASSWORD>
spring.datasource.username=<TU_USUARIO>
spring.datasource.password=<TU_PASSWORD>

# =============================================================================
# EJEMPLO DE CONFIGURACIÓN TÍPICA:
# =============================================================================
#
# Para desarrollo local con MySQL:
# spring.datasource.url=jdbc:mysql://localhost:3306/ferreteria_database
# spring.datasource.username=root
# spring.datasource.password=mipassword123
#
# =============================================================================

# =============================================================================
# CONFIGURACIONES ADICIONALES (OPCIONAL)
# =============================================================================

# Configuración del pool de conexiones (opcional)
# spring.datasource.hikari.maximum-pool-size=20
# spring.datasource.hikari.minimum-idle=5

# Configuración de logs (opcional)
# logging.level.com.example.ferreteria=DEBUG
# logging.level.org.springframework.web=DEBUG

# Configuración de CORS (opcional, para permitir requests desde frontend)
# spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:8080
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# spring.web.cors.allowed-headers=*

# =============================================================================
# VARIABLES DE ENTORNO (ALTERNATIVA MÁS SEGURA)
# =============================================================================
#
# En lugar de poner credenciales directamente, puedes usar variables de entorno:
# 
# spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:ferreteria_database}
# spring.datasource.username=${MYSQL_USER:root}
# spring.datasource.password=${MYSQL_PASSWORD:}
#
# Y luego exportar las variables antes de ejecutar:
# export MYSQL_HOST=localhost
# export MYSQL_USER=root
# export MYSQL_PASSWORD=mipassword123
# export MYSQL_DATABASE=ferreteria_database
#
# =============================================================================